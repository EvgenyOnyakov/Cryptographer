#include <iostream>
#include <stdlib.h>
#include <random>
#include <chrono>

using namespace std;

enum Cell : char
{
    EMPTY = '-',
    CROSS = 'X',
    ZERO = 'O'
};

enum Progress
{
    in_game,
    player_won,
    ai_won,
    draw
};

struct Coordinates
{
    size_t x { 0 };
    size_t y { 0 };
};

#pragma pack (push, 1)
struct Game
{
    Cell** pField = nullptr;
    size_t SIZE = 3;
    Cell ai;
    Cell player;
    size_t turn {0};
    Progress prog = in_game;
};
#pragma pack (pop)

int32_t getRandomNum(int32_t min, int32_t max)
{
    const static auto seed = chrono::system_clock::now().time_since_epoch().count();
    static mt19937_64 generator(seed);
    uniform_int_distribution<int32_t> dis(min, max);
    return dis(generator);
}

void clearScr()
{
    system("cls");
}

void startGame(Game& g)
{
    g.pField = new Cell * [g.SIZE];

    for (size_t i = 0; i < g.SIZE; i++)
    {
        g.pField[i] = new Cell[g.SIZE];
    }

    for (size_t y = 0; y < g.SIZE; y++)
    {
        for (size_t x = 0; x < g.SIZE; x++)
        {
            g.pField[y][x] = EMPTY;
        }
    }

    if (getRandomNum(0, 1000) > 500)
    {
        g.player = CROSS;
        g.ai = ZERO;
        g.turn = 0;
    }
    else
    {
        g.player = ZERO;
        g.ai = CROSS;
        g.turn = 1;
    }
}

void stopGame(Game& g)
{
    for (size_t i = 0; i < g.SIZE; i++)
    {
        delete[] g.pField[i];
    }

    delete[] g.pField;
    g.pField = nullptr;
}

void printGameField(Game& g)
{

    cout << "     ";
    for (size_t x = 0; x < g.SIZE; x++)
    {
        cout << " X" << x + 1 << " ";
    }   
    cout << endl;
    for (size_t y = 0; y < g.SIZE; y++)
    {
        cout << " Y" << y + 1 << " | ";
        for (size_t x = 0; x < g.SIZE; x++)
        {
            cout << g.pField[y][x] << " | ";
        }
        cout << endl;
    }
    cout << endl;
    cout << "Ваша фигура: " << g.player << "   " << "Фигура компьютера: " << g.ai << endl << endl;
}

Progress result(Game& g)
{
    //int p_g_win{0}, p_v_win{0}, ai_g_win{0}, ai_v_win{0};
    //for (size_t x = 0, i = 0; x < g.SIZE; x++, i++)
    //{
    //    for (size_t y = 1; y < g.SIZE; y++)
    //    {
    //        if (g.pField[i][0] == g.pField[i][y] && g.pField[i][0] == g.player)
    //            p_g_win++;
    //        if (g.pField[i][0] == g.pField[i][y] && g.pField[i][0] == g.ai)
    //            ai_g_win++;
    //    }
    //}
    //for (size_t y = 0, i = 0; y < g.SIZE; y++, i++)
    //{
    //    for (size_t x = 1; x < g.SIZE; x++)
    //    {
    //        if (g.pField[0][i] == g.pField[x][i] && g.pField[0][i] == g.player)
    //            p_v_win++;
    //        if (g.pField[0][i] == g.pField[x][i] && g.pField[0][i] == g.ai)
    //            ai_v_win++;
    //    }
    //}
    //if (p_g_win == (g.SIZE - 1) || p_v_win == (g.SIZE - 1))
    //    return player_won;
    //if (ai_g_win == (g.SIZE - 1) || ai_v_win == (g.SIZE - 1))
    //    return ai_won;
        

    //строки
    for (size_t y = 0; y < g.SIZE; y++)
    {
        if (g.pField[y][0] == g.pField[y][1] && g.pField[y][0] == g.pField[y][2])
        {
            if (g.pField[y][0] == g.player)
                return player_won;
            if (g.pField[y][0] == g.ai)
                return ai_won;
        }
    }
    // столбцы
    for (size_t x = 0; x < g.SIZE; x++)
    {
        if (g.pField[0][x] == g.pField[1][x] && g.pField[0][x] == g.pField[2][x])
        {
            if (g.pField[0][x] == g.player)
                return player_won;
            if (g.pField[0][x] == g.ai)
                return ai_won;
        }
    }
    //диагональ
    if (g.pField[0][0] == g.pField[1][1] && g.pField[0][0] == g.pField[2][2])
    {
        if (g.pField[1][1] == g.player)
            return player_won;
        if (g.pField[1][1] == g.ai)
            return ai_won;
    }
    if (g.pField[0][2] == g.pField[1][1] && g.pField[2][0] == g.pField[1][1])
    {
        if (g.pField[1][1] == g.player)
            return player_won;
        if (g.pField[1][1] == g.ai)
            return ai_won;
    }

    bool DRAW = true;
    for (size_t y = 0; y < g.SIZE; y++)
    {
        for (size_t x = 0; x < g.SIZE; x++)
        {
            if (g.pField[y][x] == EMPTY)
            {
                DRAW = false;
                break;
            }
        }
        if (!DRAW)
            break;
    }

    if (DRAW)
        return draw;
    return in_game;
}

Coordinates getPlayerCoord(Game& g)
{
    Coordinates c;

    do
    {
        cout << "Введите координату X: ";
        cin >> c.x;
        cout << "Введите координату Y: ";
        cin >> c.y;
        c.x--;
        c.y--;        
    } while (c.x > 2 || c.y > 2 || g.pField[c.y][c.x] != EMPTY);

    return c;
}

Coordinates getAICoord(Game& g)
{
    if (g.pField[1][1] == EMPTY)
        return { 1, 1 };
    // углы
    Coordinates buff[4];
    size_t num = 0;
    if (g.pField[0][0] == EMPTY)
    {
        buff[num] = { 0, 0 };
        num++;
    }
    if (g.pField[0][2] == EMPTY)
    {
        buff[num] = { 0, 2 };
        num++;
    }
    if (g.pField[2][0] == EMPTY)
    {
        buff[num] = { 2, 0 };
        num++;
    }
    if (g.pField[2][2] == EMPTY)
    {
        buff[num] = { 2, 2 };
        num++;
    }    

    if (num > 0)
    {
        const size_t index = getRandomNum(0, 1000) % num;
        return buff[index];
    }

    //неуглы
    num = 0;
    if (g.pField[0][1] == EMPTY)
    {
        buff[num] = { 0, 1 };
        num++;
    }
    if (g.pField[1][0] == EMPTY)
    {
        buff[num] = { 1, 0 };
        num++;
    }
    if (g.pField[1][2] == EMPTY)
    {
        buff[num] = { 1, 2 };
        num++;
    }
    if (g.pField[2][1] == EMPTY)
    {
        buff[num] = { 2, 1 };
        num++;
    }

    if (num > 0)
    {
        const size_t index = getRandomNum(0, 1000) % num;
        return buff[index];
    }
}

void congratulation(Game& g)
{
    if (g.prog == player_won)
    {
        cout << "Player WIN" << endl;
    }
    if (g.prog == ai_won)
    {
        cout << "COMPUKTER WIN" << endl;
    }
    if (g.prog == draw)
    {
        cout << "draw" << endl;
    }
}

int main()
{
    setlocale(LC_ALL, "Russian");
    system("title Крестики Нолики");
    system("color 70");
        
    Game g;
    startGame(g);
    printGameField(g);

    do
    {
        if (g.turn % 2 == 0)
        {
            Coordinates c = getPlayerCoord(g);            
            g.pField[c.y][c.x] = g.player;
        }
        else
        {
            Coordinates c = getAICoord(g);
            g.pField[c.y][c.x] = g.ai;
        }
        g.turn++;
        clearScr();
        printGameField(g);
        g.prog = result(g);
    } while (g.prog == in_game);

    congratulation(g);

    stopGame(g);
    return 0;
}

